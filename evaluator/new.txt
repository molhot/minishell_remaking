
STRCPY(3)                BSD Library Functions Manual                STRCPY(3)

NNAAMMEE
     ssttppccppyy,, ssttppnnccppyy,, ssttrrccppyy, ssttrrnnccppyy -- copy strings

LLIIBBRRAARRYY
     Standard C Library (libc, -lc)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttrriinngg..hh>>

     _c_h_a_r _*
     ssttppccppyy(_c_h_a_r _* _d_s_t, _c_o_n_s_t _c_h_a_r _* _s_r_c);

     _c_h_a_r _*
     ssttppnnccppyy(_c_h_a_r _* _d_s_t, _c_o_n_s_t _c_h_a_r _* _s_r_c, _s_i_z_e___t _l_e_n);

     _c_h_a_r _*
     ssttrrccppyy(_c_h_a_r _* _d_s_t, _c_o_n_s_t _c_h_a_r _* _s_r_c);

     _c_h_a_r _*
     ssttrrnnccppyy(_c_h_a_r _* _d_s_t, _c_o_n_s_t _c_h_a_r _* _s_r_c, _s_i_z_e___t _l_e_n);

DDEESSCCRRIIPPTTIIOONN
     The ssttppccppyy() and ssttrrccppyy() functions copy the string _s_r_c to _d_s_t (including
     the terminating `\0' character.)

     The ssttppnnccppyy() and ssttrrnnccppyy() functions copy at most _l_e_n characters from
     _s_r_c into _d_s_t.  If _s_r_c is less than _l_e_n characters long, the remainder of
     _d_s_t is filled with `\0' characters.  Otherwise, _d_s_t is _n_o_t terminated.

     The source and destination strings should not overlap, as the behavior is
     undefined.

RREETTUURRNN VVAALLUUEESS
     The ssttrrccppyy() and ssttrrnnccppyy() functions return _d_s_t.  The ssttppccppyy() and
     ssttppnnccppyy() functions return a pointer to the terminating `\0' character of
     _d_s_t.  If ssttppnnccppyy() does not terminate _d_s_t with a NUL character, it
     instead returns a pointer to dst[n] (which does not necessarily refer to
     a valid memory location.)

EEXXAAMMPPLLEESS
     The following sets _c_h_a_r_a_r_r_a_y to ``abc\0\0\0'':

           char chararray[6];

           (void)strncpy(chararray, "abc", sizeof(chararray));

     The following sets _c_h_a_r_a_r_r_a_y to ``abcdef'':

           char chararray[6];

           (void)strncpy(chararray, "abcdefgh", sizeof(chararray));

     Note that it does _n_o_t NUL terminate _c_h_a_r_a_r_r_a_y because the length of the
     source string is greater than or equal to the length argument.

     The following copies as many characters from _i_n_p_u_t to _b_u_f as will fit and
     NUL terminates the result.  Because ssttrrnnccppyy() does _n_o_t guarantee to NUL
     terminate the string itself, this must be done explicitly.

           char buf[1024];

           (void)strncpy(buf, input, sizeof(buf) - 1);
           buf[sizeof(buf) - 1] = '\0';

     This could be better achieved using strlcpy(3), as shown in the following
     example:

           (void)strlcpy(buf, input, sizeof(buf));

     Note that because strlcpy(3) is not defined in any standards, it should
     only be used when portability is not a concern.

SSEEEE AALLSSOO
     bcopy(3), memccpy(3), memcpy(3), memmove(3), strlcpy(3), wcscpy(3)

SSTTAANNDDAARRDDSS
     The ssttrrccppyy() and ssttrrnnccppyy() functions conform to ISO/IEC 9899:1990
     (``ISO C90'').  The ssttppccppyy() and ssttppnnccppyy() functions conform to IEEE Std
     1003.1-2008 (``POSIX.1'').

HHIISSTTOORRYY
     The ssttppccppyy() function first appeared in FreeBSD 4.4, and ssttppnnccppyy() was
     added in FreeBSD 8.0.

SSEECCUURRIITTYY CCOONNSSIIDDEERRAATTIIOONNSS
     The ssttrrccppyy() function is easily misused in a manner which enables mali-
     cious users to arbitrarily change a running program's functionality
     through a buffer overflow attack.

BSD                            February 28, 2009                           BSD
